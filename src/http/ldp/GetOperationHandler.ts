import type { ETagHandler } from '../../storage/conditions/ETagHandler';
import type { ResourceStore } from '../../storage/ResourceStore';
import { NotImplementedHttpError } from '../../util/errors/NotImplementedHttpError';
import { assertReadConditions } from '../../util/ResourceUtil';
import { OkResponseDescription } from '../output/response/OkResponseDescription';
import type { ResponseDescription } from '../output/response/ResponseDescription';
import type { OperationHandlerInput } from './OperationHandler';
import { OperationHandler } from './OperationHandler';
import { getLoggerFor } from '../../logging/LogUtil';
import { readableToQuads, readJsonStream } from '../../util/StreamUtil';
import { ReadStream } from 'node:fs';
import { Guarded, guardStream } from '../../util/GuardedStream';
import { PassThrough, Readable } from 'node:stream';
import { BraidSubscriptionStore } from '../../braid/BraidSubscriptionStore';

// Subscription storage: keys are generated by subscription_hash
export const subscriptions: { [key: string]: any } = {};



/**
 * Handles GET {@link Operation}s.
 * Calls the getRepresentation function from a {@link ResourceStore}.
 */
export class GetOperationHandler extends OperationHandler {
  protected readonly logger = getLoggerFor(this);
  private readonly store: ResourceStore;
  private readonly braidStore: BraidSubscriptionStore;
  private readonly eTagHandler: ETagHandler;

  public constructor(store: ResourceStore, braidStore: BraidSubscriptionStore, eTagHandler: ETagHandler) {
    super();
    this.store = store;
    this.braidStore = braidStore // TODO remove me
    this.eTagHandler = eTagHandler;
  }

  public async canHandle(input: OperationHandlerInput): Promise<void> {
    const { operation } = input;
    if (operation.method !== 'GET') {
      throw new NotImplementedHttpError('This handler only supports GET operations');
    }
  }

  public async handle(input: OperationHandlerInput): Promise<ResponseDescription> {
    const { operation, request, response } = input as OperationHandlerInput & { request: any, response: any };
    const body = await this.store.getRepresentation(operation.target, operation.preferences, operation.conditions);

    // Check whether the cached representation is still valid or it is necessary to send a new representation
    assertReadConditions(body, this.eTagHandler, operation.conditions);

  
    // const [dataStream1, dataStream2] = teeStream(body.data);


    return new OkResponseDescription(body.metadata, body.data)
  }

}
/** Helper to clone a stream into two identical streams */
function teeStream(stream: Guarded<Readable>): [Guarded<Readable>,Guarded<Readable>] {
  const stream1 = guardStream(new PassThrough());
  const stream2 = guardStream(new PassThrough());
  stream.pipe(stream1);
  stream.pipe(stream2);
  return [stream1, stream2];
}

/** Helper to collect stream data into a Buffer */
export async function readableToBuffer(stream: Guarded<Readable>): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const chunks: Buffer[] = [];
    stream.on('data', (chunk:any) => chunks.push(chunk));
    stream.on('end', () => resolve(Buffer.concat(chunks)));
    stream.on('error', reject);
  });
}

